# Sample Application 1: CPU-intensive app with metrics
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app-1
  labels:
    app: sample-app-1
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sample-app-1
  template:
    metadata:
      labels:
        app: sample-app-1
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: sample-app-1
          image: prom/node-exporter:latest
          ports:
            - containerPort: 9100
              name: metrics
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
          readinessProbe:
            httpGet:
              path: /metrics
              port: 9100
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /metrics
              port: 9100
            initialDelaySeconds: 15
            periodSeconds: 20

---
apiVersion: v1
kind: Service
metadata:
  name: sample-app-1-service
  labels:
    app: sample-app-1
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9100"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: sample-app-1
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9100
      name: metrics
  type: LoadBalancer

---
# Sample Application 2: Web server with different metrics pattern
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app-2
  labels:
    app: sample-app-2
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: sample-app-2
  template:
    metadata:
      labels:
        app: sample-app-2
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: sample-app-2
          image: nginx:alpine
          ports:
            - containerPort: 80
              name: http
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 100m
              memory: 128Mi
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 15
          volumeMounts:
            - name: config-volume
              mountPath: /etc/nginx/conf.d
        - name: nginx-exporter
          image: nginx/nginx-prometheus-exporter:latest
          args:
            - '-nginx.scrape-uri=http://localhost/nginx_status'
          ports:
            - containerPort: 9113
              name: metrics
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
            limits:
              cpu: 50m
              memory: 64Mi
      volumes:
        - name: config-volume
          configMap:
            name: nginx-config

---
# ConfigMap for nginx to enable status page for metrics
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;
        
        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow all;
        }
        
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }

---
apiVersion: v1
kind: Service
metadata:
  name: sample-app-2-service
  labels:
    app: sample-app-2
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9113"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: sample-app-2
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      name: http
    - protocol: TCP
      port: 9113
      targetPort: 9113
      name: metrics
  type: LoadBalancer

---
# Additional deployment for generating varied metrics
apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-generator
  labels:
    app: load-generator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: load-generator
  template:
    metadata:
      labels:
        app: load-generator
    spec:
      containers:
        - name: load-generator
          image: busybox:latest
          command:
            - /bin/sh
            - -c
            - |
              while true; do
                # Generate CPU load
                dd if=/dev/zero of=/dev/null bs=1M count=100 2>/dev/null
                sleep 30
                # Make HTTP requests to sample apps
                wget -qO- http://sample-app-1-service/ || true
                wget -qO- http://sample-app-2-service/ || true
                sleep 60
              done
          resources:
            requests:
              cpu: 50m
              memory: 32Mi
            limits:
              cpu: 100m
              memory: 64Mi